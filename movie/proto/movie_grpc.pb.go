// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.4
// source: movie.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MovieLibraryServiceClient is the client API for MovieLibraryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieLibraryServiceClient interface {
	LoadMovies(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error)
	GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error)
	UpdateMovieDetails(ctx context.Context, in *UpdateMovieDetailsRequest, opts ...grpc.CallOption) (*UpdateMovieDetailsResponse, error)
}

type movieLibraryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieLibraryServiceClient(cc grpc.ClientConnInterface) MovieLibraryServiceClient {
	return &movieLibraryServiceClient{cc}
}

func (c *movieLibraryServiceClient) LoadMovies(ctx context.Context, in *MovieRequest, opts ...grpc.CallOption) (*MovieResponse, error) {
	out := new(MovieResponse)
	err := c.cc.Invoke(ctx, "/movie_library.MovieLibraryService/LoadMovies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieLibraryServiceClient) GetMovieDetails(ctx context.Context, in *GetMovieDetailsRequest, opts ...grpc.CallOption) (*GetMovieDetailsResponse, error) {
	out := new(GetMovieDetailsResponse)
	err := c.cc.Invoke(ctx, "/movie_library.MovieLibraryService/GetMovieDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieLibraryServiceClient) UpdateMovieDetails(ctx context.Context, in *UpdateMovieDetailsRequest, opts ...grpc.CallOption) (*UpdateMovieDetailsResponse, error) {
	out := new(UpdateMovieDetailsResponse)
	err := c.cc.Invoke(ctx, "/movie_library.MovieLibraryService/UpdateMovieDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieLibraryServiceServer is the server API for MovieLibraryService service.
// All implementations must embed UnimplementedMovieLibraryServiceServer
// for forward compatibility
type MovieLibraryServiceServer interface {
	LoadMovies(context.Context, *MovieRequest) (*MovieResponse, error)
	GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error)
	UpdateMovieDetails(context.Context, *UpdateMovieDetailsRequest) (*UpdateMovieDetailsResponse, error)
	mustEmbedUnimplementedMovieLibraryServiceServer()
}

// UnimplementedMovieLibraryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMovieLibraryServiceServer struct {
}

func (UnimplementedMovieLibraryServiceServer) LoadMovies(context.Context, *MovieRequest) (*MovieResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoadMovies not implemented")
}
func (UnimplementedMovieLibraryServiceServer) GetMovieDetails(context.Context, *GetMovieDetailsRequest) (*GetMovieDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMovieDetails not implemented")
}
func (UnimplementedMovieLibraryServiceServer) UpdateMovieDetails(context.Context, *UpdateMovieDetailsRequest) (*UpdateMovieDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMovieDetails not implemented")
}
func (UnimplementedMovieLibraryServiceServer) mustEmbedUnimplementedMovieLibraryServiceServer() {}

// UnsafeMovieLibraryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieLibraryServiceServer will
// result in compilation errors.
type UnsafeMovieLibraryServiceServer interface {
	mustEmbedUnimplementedMovieLibraryServiceServer()
}

func RegisterMovieLibraryServiceServer(s grpc.ServiceRegistrar, srv MovieLibraryServiceServer) {
	s.RegisterService(&MovieLibraryService_ServiceDesc, srv)
}

func _MovieLibraryService_LoadMovies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MovieRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieLibraryServiceServer).LoadMovies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_library.MovieLibraryService/LoadMovies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieLibraryServiceServer).LoadMovies(ctx, req.(*MovieRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieLibraryService_GetMovieDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMovieDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieLibraryServiceServer).GetMovieDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_library.MovieLibraryService/GetMovieDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieLibraryServiceServer).GetMovieDetails(ctx, req.(*GetMovieDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieLibraryService_UpdateMovieDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMovieDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieLibraryServiceServer).UpdateMovieDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/movie_library.MovieLibraryService/UpdateMovieDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieLibraryServiceServer).UpdateMovieDetails(ctx, req.(*UpdateMovieDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MovieLibraryService_ServiceDesc is the grpc.ServiceDesc for MovieLibraryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MovieLibraryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "movie_library.MovieLibraryService",
	HandlerType: (*MovieLibraryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoadMovies",
			Handler:    _MovieLibraryService_LoadMovies_Handler,
		},
		{
			MethodName: "GetMovieDetails",
			Handler:    _MovieLibraryService_GetMovieDetails_Handler,
		},
		{
			MethodName: "UpdateMovieDetails",
			Handler:    _MovieLibraryService_UpdateMovieDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "movie.proto",
}
